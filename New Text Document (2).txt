========cubecolor

using System.Collections;
using System.Collections.Generic;
using UnityEngine;


public class CubeColor : MonoBehaviour {
  
    public Renderer rend;
    Material entrymat,exitmat;



    void Start()
    {
        entrymat = Resources.Load("Texture", typeof(Material)) as Material;
        exitmat = Resources.Load("Texture2", typeof(Material)) as Material;
        rend = GetComponent<Renderer>();
    }
    
   
    void Update()
    {
        if (Input.GetKey(KeyCode.Mouse1))
        { 
            rend.GetComponent<Renderer>().material = entrymat;
        }
    }
    void OnMouseEnter()
    {
        rend.GetComponent<Renderer>().material = entrymat;
    }
    void OnMouseExit()
    {
        rend.GetComponent<Renderer>().material = exitmat;
    }
}


=======Ballcontrol

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BallController : MonoBehaviour
{
    private Vector3 startpos;
    Rigidbody rb;
    public bool isGrounded;
    void Start()
    {
        rb = this.GetComponent<Rigidbody>();
        isGrounded = false;
        startpos = rb.transform.localPosition;
    }

    
    void Update()
    {
        if (isGrounded == true && Input.GetMouseButtonUp(0))
        {
            rb.AddForce(new Vector3(0f, 500f, 0f));
            

        }
        if(isGrounded == true)
        {
            rb.GetComponent<Renderer>().material.color = Color.cyan;
        }
        if(isGrounded == false)
        {
            rb.GetComponent<Renderer>().material.color = Color.yellow;
        }
        if (Input.GetKey(KeyCode.R))
        {
            rb.transform.localPosition = startpos;
        }

        }

    void OnCollisionEnter(Collision collision)
    {
        if(collision.gameObject.name == "Ground")
        {
            isGrounded=true;
        }
    }

    void OnCollisionExit(Collision collision)
    {
        if (collision.gameObject.name == "Ground")
        {
            isGrounded = false;
        }
    }
}


========spheretransform


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SphereTransformation : MonoBehaviour
{
    public Rigidbody rb;
    public float speed = 10;
    Vector3 startpos;
    private float xInput, yInput;


    // Start is called before the first frame update  
    void Start()
    {
        startpos = rb.transform.localPosition;
    }
    void Awake()
    {
        rb = GetComponent<Rigidbody>();
    }


    // Update is called once per frame
    void Update()
    {
        xInput = Input.GetAxis("Horizontal");
        yInput = Input.GetAxis("Vertical");
        if (Input.GetKey(KeyCode.R))
        {
            rb.transform.localPosition = startpos;
            rb.velocity = Vector3.zero;
            rb.angularVelocity = Vector3.zero;
        }
    }

    private void FixedUpdate()
    {
        rb.AddForce(new Vector3(xInput, 0f, yInput) * speed);
    }
}

        
=======cubetransform


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CubeTransformations : MonoBehaviour
{
    private Vector3 scaleChangePos, scaleChangeNeg, startpos;
    public Rigidbody rb;

    // Start is called before the first frame update
    void Start()
    {
        startpos = rb.transform.localPosition;
    }

    // Update is called once per frame
    void Update()
    {
        scaleChangeNeg = new Vector3(-0.01f, -0.01f, -0.01f);
        scaleChangePos = new Vector3(0.01f, 0.01f, 0.01f);
        if (Input.GetKey(KeyCode.UpArrow))
        {
            this.transform.localScale += scaleChangePos;
        }

        if (Input.GetKey(KeyCode.DownArrow))
        {
            this.transform.localScale += scaleChangeNeg;
        }

        if (Input.GetKey(KeyCode.LeftArrow))
        {
            this.transform.Rotate(Vector3.up, -1);
        }

        if (Input.GetKey(KeyCode.RightArrow))
        {
            this.transform.Rotate(Vector3.up, 1);
        }
        if (Input.GetKey(KeyCode.R))
        {
            rb.transform.localPosition = startpos;
            rb.velocity = Vector3.zero;
            rb.angularVelocity = Vector3.zero;
        }

    }
}
