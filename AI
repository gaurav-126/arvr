# graph = {
#   '5' : ['3','7'],
#   '3' : ['2', '4'],
#   '7' : ['8'],
#   '2' : [],
#   '4' : ['8'],
#   '8' : []
# }

# visited = [] # List for visited nodes.
# queue = []     #Initialize a queue

# def bfs(visited, graph, node): #function for BFS
#   visited.append(node)
#   queue.append(node)

#   while queue:          # Creating loop to visit each node
#     m = queue.pop(0) 
#     print (m, end = " ") 

#     for neighbour in graph[m]:
#       if neighbour not in visited:
#         visited.append(neighbour)
#         queue.append(neighbour)

# # Driver Code
# print("Following is the Breadth-First Search")
# bfs(visited, graph, '5')    # function calling


# # DFS
# visited = set() # Set to keep track of visited nodes of graph.

# def dfs(visited, graph, node):  #function for dfs 
#     if node not in visited:
#         print (node,end = ' ')
#         visited.add(node)
#         for neighbour in graph[node]:
#             dfs(visited, graph, neighbour)

# # Driver Code
# print("\nFollowing is the Depth-First Search")
# dfs(visited, graph, '5')



# #--------------------------------------------------






# #-------------------------------------------------------------------

# def printjobschedule(array, t):
#     m = len(array)
#     # Sort all jobs accordingly
#     for j in range(m):
#         for q in range(m - 1 - j):
#             if array[q][2] < array[q + 1][2]:
#                 array[q], array[q + 1] = array[q + 1], array[q]
#     res = [False] * t
#     # To store result
#     job = ['-1'] * t
#     for _ in range(len(array)):
#         # Find a free slot
#         for q in range(min(t - 1, array[q][1] - 1), -1, -1):
#             if res[q] is False:
#                 res[q] = True
#                 job[q] = array[q][0]
#                 break
#     # print
#     print(job)
# # Driver
# array = [['a', 7, 202],
#        ['b', 5, 29],
#        ['c', 6, 84],
#        ['d', 1, 75],
#        ['e', 2, 43]]
# print("Maximum profit sequence of jobs is- ")
# printjobschedule(array, 3)



# #---------------------------------------------------

# def issafe(arr,x,y,n):
#     for row in range(x):
#         if arr[row][y] ==1:
#             # Checking column attack
#             return False
#     row = x
#     col = y
#     #Checking Diagonal Attack
#     while row>=0 and col>=0:
#         if arr[row][col]==1:
#             return False
#         row-=1
#         col-=1

#     row = x
#     col = y
#     #Checking Anti Diagonal Attack
#     while row>=0 and col<n:
#         if arr[row][col]==1:
#             return False
#         row-=1
#         col+=1

#     return True

# def nQueen(arr,x,n):
#     if x>=n:
#         return True

#     for col in range(n):
#         if issafe(arr,x,col,n):
#             arr[x][col]=1
#             if nQueen(arr,x+1,n):
#                 return True
#             arr[x][col] = 0

#     return False

# def main():
#     n = int(input("Enter number of Queens : "))
#     arr = [[0]*n for i in range(n)]

#     if nQueen(arr,0,n):
#         for i in range(n):
#             for j in range(n):
#                 print(arr[i][j],end=" ")
#             print()

# main()


# import nltk
# from nltk.chat.util import Chat, reflections

# pairs=[
#     #
#     [
#         r"my name is (.*)",
#         ["Hello %1, How are you ?"]


#     ],
#     # Or expression
#     [
#         r"Hi|Hello|Hey there|Hola",
#         ["Hello my name is Hiesenberg"]
#     ],
#     [
#         r"what is your name ?",
#         ["I am a bot created by Heisenberg. you can call me crazy!",]
#     ],
#     [
#         r"how are you ?",
#         ["I'm doing good How about You ?",]
#     ],
#     [
#         r"sorry (.*)",
#         ["Its alright","Its OK, never mind",]
#     ],
#     [
#         r"I am fine",
#         ["Great to hear that, How can I help you?",]
#     ],
#     [
#         r"I (.*) good",
#         ["Nice to hear that","How can I help you?:)",]
#     ],
#     [
#         r"(.*) age?",
#         ["I'm a computer program dude Seriously you are asking me this?",]
#     ],
#     [
#         r"what (.*) want ?",
#         ["Make me an offer I can't refuse",]
#     ],
#     [
#         r"(.*) created ?",
#         ["Raghav created me using Python's NLTK library ","top secret ;)",]
#     ],
#     [
#         r"(.*) (location|city) ?",
#         ['Indore, Madhya Pradesh',]
#     ],
#     [
#         r"how is weather in (.*)?",
#         ["Weather in %1 is awesome like always","Too hot man here in %1","Too cold man here in %1","Never even heard about %1"]
#     ],
#     [
#         r"i work in (.*)?",
#         ["%1 is an Amazing company, I have heard about it. But they are in huge loss these days.",]
#     ],
#     [
#         r"(.*)raining in (.*)",
#         ["No rain since last week here in %2","Damn its raining too much here in %2"]
#     ],
#     [
#         r"how (.*) health(.*)",
#         ["I'm a computer program, so I'm always healthy ",]
#     ],
#     [
#         r"(.*) (sports|game) ?",
#         ["I'm a very big fan of Football",]
#     ],
#     [
#         r"who (.*) sportsperson ?",
#         ["Messy","Ronaldo","Roony"]
#     ],
#     [
#         r"who (.*) (moviestar|actor)?",
#         ["Brad Pitt"]
#     ],
#     [
#         r"i am looking for online guides and courses to learn data science, can you suggest?",
#         ["Crazy_Tech has many great articles with each step explanation along with code, you can explore"]
#     ],
#     [
#         r"quit",
#         ["Thank you for using our intelligence services"]
#     ],
    

# ]

# def chat():
#     print("Hey there! I am Heisenberg at your service")
#     chat = Chat(pairs,reflections)
#     chat.converse()
# chat()


